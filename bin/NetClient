#!/usr/bin/perl -w 

use Daemon::Daemonize qw/ :all /;
use IO::Socket::INET;
use File::Tail;
use threads;
use YAML::Tiny;
use Data::Dumper;
use Logger::Logger;
use FindBin;

use lib "$FindBin::Bin/../lib";

use Main;

my $pidfile = "/var/run/NetClient.pid";
my ($socket,$client_socket);
my @threads; #threads array

#TODO
if ( Main::start_proc() eq 0 ) {
	$logger->debug_message("StartUP process result: " . Main::start_proc());
	exit 1;
}

$logger->debug_message("StartUP process result: " . Main::start_proc());

Daemon::Daemonize->daemonize;
write_pidfile( $pidfile );

foreach $key ( keys $config->[0] ) {

#проверяем что указано как целевой файл
#может быть @file  - обычный текстовый файл 
#или @parrent - регулярное выражение
        #если был указан file
        if ( exists($config->[0]->{$key}->{'file'}) ) {
                #если файл найден на диске
                if ( -f "$config->[0]->{$key}->{'local_path'}/$config->[0]->{$key}->{'file'}" ) {
                        $t = threads->new(\&Main::send_read_log,"$config->[0]->{$key}->{'file'}::$config->[0]->{$key}->{'local_path'}::$config->[0]->{$key}->{'server'}::$config->[0]->{$key}->{'remote_path'}");
			$logger->debug_message("$config->[0]->{$key}->{'file'}::$config->[0]->{$key}->{'local_path'}::$config->[0]->{$key}->{'server'}::$config->[0]->{$key}->{'remote_path'}");
			push @threads, $t;
                }
        #если используется регулярка (parrent)
        } elsif ( exists($config->[0]->{$key}->{'parrent'}) ) {
                opendir CONFDIR, "$config->[0]->{$key}->{'local_path'}";
                $parrent = "$config->[0]->{$key}->{'parrent'}";
                @files_array = grep /$parrent/, readdir CONFDIR;
                foreach $full_file_name ( @files_array ) {
                        @tmp_name = split("/",$full_file_name);
                        $file_name = @tmp_name[q/-1/];
                        $t = threads->new(\&Main::send_read_log,$file_name . "::$config->[0]->{$key}->{'local_path'}::$config->[0]->{$key}->{'server'}::$config->[0]->{$key}->{'remote_path'}");
			$logger->debug_message($file_name . "::$config->[0]->{$key}->{'local_path'}::$config->[0]->{$key}->{'server'}::$config->[0]->{$key}->{'remote_path'}");
			push @threads, $t;
                }
                closedir(CONFDIR);

        } else {
		#TODO
	}
}

#процесс будет ждать завершения всех потоков
foreach(threads->list) {
        $_->join();
}


$socket->close();
